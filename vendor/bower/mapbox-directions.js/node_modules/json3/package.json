{
  "_args": [
    [
      {
        "raw": "json3@git://github.com/bestiejs/json3.git#v3.2.6",
        "scope": null,
        "escapedName": "json3",
        "name": "json3",
        "rawSpec": "git://github.com/bestiejs/json3.git#v3.2.6",
        "spec": "git://github.com/bestiejs/json3.git#v3.2.6",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:bestiejs/json3.git#v3.2.6",
          "sshUrl": "git+ssh://git@github.com/bestiejs/json3.git#v3.2.6",
          "httpsUrl": "git+https://github.com/bestiejs/json3.git#v3.2.6",
          "gitUrl": "git://github.com/bestiejs/json3.git#v3.2.6",
          "shortcut": "github:bestiejs/json3#v3.2.6",
          "directUrl": "https://raw.githubusercontent.com/bestiejs/json3/v3.2.6/package.json"
        }
      },
      "C:\\Users\\User\\Dropbox\\www\\app\\vendor\\bower\\mapbox-directions.js\\node_modules\\mapbox.js"
    ]
  ],
  "_from": "git://github.com/bestiejs/json3.git#v3.2.6",
  "_id": "json3@3.2.6",
  "_inCache": true,
  "_location": "/json3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "json3@git://github.com/bestiejs/json3.git#v3.2.6",
    "scope": null,
    "escapedName": "json3",
    "name": "json3",
    "rawSpec": "git://github.com/bestiejs/json3.git#v3.2.6",
    "spec": "git://github.com/bestiejs/json3.git#v3.2.6",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:bestiejs/json3.git#v3.2.6",
      "sshUrl": "git+ssh://git@github.com/bestiejs/json3.git#v3.2.6",
      "httpsUrl": "git+https://github.com/bestiejs/json3.git#v3.2.6",
      "gitUrl": "git://github.com/bestiejs/json3.git#v3.2.6",
      "shortcut": "github:bestiejs/json3#v3.2.6",
      "directUrl": "https://raw.githubusercontent.com/bestiejs/json3/v3.2.6/package.json"
    }
  },
  "_requiredBy": [
    "/mapbox.js"
  ],
  "_resolved": "git://github.com/bestiejs/json3.git#7b89fd94939f970f316420e157a836cc68aa2207",
  "_shasum": "e9f31a6fdc6e1f7705810f7fa2229c1d5cc1ae05",
  "_shrinkwrap": null,
  "_spec": "json3@git://github.com/bestiejs/json3.git#v3.2.6",
  "_where": "C:\\Users\\User\\Dropbox\\www\\app\\vendor\\bower\\mapbox-directions.js\\node_modules\\mapbox.js",
  "author": {
    "name": "Kit Cambridge",
    "email": "github@kitcambridge.be",
    "url": "http://kitcambridge.be/"
  },
  "bugs": {
    "url": "https://github.com/bestiejs/json3/issues"
  },
  "contributors": [
    {
      "name": "Mangled Deutz",
      "email": "olivier@webitup.fr",
      "url": "http://tech.roxee.tv/"
    },
    {
      "name": "Øyvind Sean Kinsey",
      "email": "oyvind@kinsey.no",
      "url": "http://fb.me/ok"
    },
    {
      "name": "Oskar Schöldström",
      "email": "public@oxy.fi",
      "url": "http://oxy.fi/"
    },
    {
      "name": "Benjamin Tan",
      "email": "demoneaux@gmail.com",
      "url": "http://d10.github.io/"
    },
    {
      "name": "Kiryl Yermakou",
      "email": "rma4ok@gmail.com",
      "url": "https://github.com/rma4ok"
    }
  ],
  "dependencies": {},
  "description": "A modern JSON implementation compatible with nearly all JavaScript platforms.",
  "devDependencies": {},
  "gitHead": "7b89fd94939f970f316420e157a836cc68aa2207",
  "homepage": "http://bestiejs.github.io/json3",
  "jam": {
    "main": "./lib/json3.js"
  },
  "keywords": [
    "json",
    "spec",
    "ecma",
    "es5",
    "lexer",
    "parser",
    "stringify"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://kit.mit-license.org/"
    }
  ],
  "main": "./lib/json3",
  "maintainers": [
    {
      "name": "Kit Cambridge",
      "email": "github@kitcambridge.be",
      "url": "http://kitcambridge.be/"
    }
  ],
  "name": "json3",
  "optionalDependencies": {},
  "readme": "# JSON 3 #\r\n\r\n![JSON 3 Logo](http://bestiejs.github.io/json3/page/logo.png)\r\n\r\n**JSON 3** is a modern JSON implementation compatible with a variety of JavaScript platforms, including Internet Explorer 6, Opera 7, Safari 2, and Netscape 6. The current version is **3.2.6**.\r\n\r\n- [Development Version](https://raw.github.com/bestiejs/json3/v3.2.6/lib/json3.js) *(40 KB; uncompressed with comments)*\r\n- [Production Version](https://raw.github.com/bestiejs/json3/v3.2.6/lib/json3.min.js) *(3.3 KB; compressed and `gzip`-ped)*\r\n\r\nCDN copies are also available at [cdnjs](http://cdnjs.com/libraries/json3/) & [jsDelivr](http://www.jsdelivr.com/#!json3).\r\n\r\n[JSON](http://json.org/) is a language-independent data interchange format based on a loose subset of the JavaScript grammar. Originally popularized by [Douglas Crockford](http://www.crockford.com/), the format was standardized in the [fifth edition](http://es5.github.com/) of the ECMAScript specification. The 5.1 edition, ratified in June 2011, incorporates several modifications to the grammar pertaining to the serialization of dates.\r\n\r\nJSON 3 exposes two functions: `stringify()` for [serializing](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/JSON/stringify) a JavaScript value to JSON, and `parse()` for [producing](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/JSON/parse) a JavaScript value from a JSON source string. It is a **drop-in replacement** for [JSON 2](http://json.org/js). The functions behave exactly as described in the ECMAScript spec, **except** for the date serialization discrepancy noted below.\r\n\r\nThe JSON 3 parser does **not** use `eval` or regular expressions. This provides security and performance benefits in obsolete and mobile environments, where the margin is particularly significant. The complete [benchmark suite](http://jsperf.com/json3) is available on [jsPerf](http://jsperf.com/).\r\n\r\nThe project is [hosted on GitHub](http://git.io/json3), along with the [unit tests](http://bestiejs.github.io/json3/test/test_browser.html). It is part of the [BestieJS](https://github.com/bestiejs) family, a collection of best-in-class JavaScript libraries that promote cross-platform support, specification precedents, unit testing, and plenty of documentation.\r\n\r\n# Changes from JSON 2 #\r\n\r\nJSON 3...\r\n\r\n* Correctly serializes primitive wrapper objects.\r\n* Throws a `TypeError` when serializing cyclic structures (JSON 2 recurses until the call stack overflows).\r\n* Utilizes **feature tests** to detect broken or incomplete *native* JSON implementations (JSON 2 only checks for the presence of the native functions). The tests are only executed once at runtime, so there is no additional performance cost when parsing or serializing values.\r\n\r\n**As of v3.2.3**, JSON 3 is compatible with [Prototype](http://prototypejs.org) 1.6.1 and older.\r\n\r\nIn contrast to JSON 2, JSON 3 **does not**...\r\n\r\n* Add `toJSON()` methods to the `Boolean`, `Number`, and `String` prototypes. These are not part of any standard, and are made redundant by the design of the `stringify()` implementation.\r\n* Add `toJSON()` or `toISOString()` methods to `Date.prototype`. See the note about date serialization below.\r\n\r\n## Date Serialization\r\n\r\n**JSON 3 deviates from the specification in one important way**: it does not define `Date#toISOString()` or `Date#toJSON()`. This preserves CommonJS compatibility and avoids polluting native prototypes. Instead, date serialization is performed internally by the `stringify()` implementation: if a date object does not define a custom `toJSON()` method, it is serialized as a [simplified ISO 8601 date-time string](http://es5.github.com/#x15.9.1.15).\r\n\r\n**Several native `Date#toJSON()` implementations produce date time strings that do *not* conform to the grammar outlined in the spec**. For instance, all versions of Safari 4, as well as JSON 2, fail to serialize extended years correctly. Furthermore, JSON 2 and older implementations omit the milliseconds from the date-time string (optional in ES 5, but required in 5.1). Finally, in all versions of Safari 4 and 5, serializing an invalid date will produce the string `\"Invalid Date\"`, rather than `null`. Because these environments exhibit other serialization bugs, however, JSON 3 will override the native `stringify()` implementation.\r\n\r\nPortions of the date serialization code are adapted from the [`date-shim`](https://github.com/Yaffle/date-shim) project.\r\n\r\n# Usage #\r\n\r\n## Web Browsers\r\n\r\n    <script src=\"http://bestiejs.github.io/json3/lib/json3.js\"></script>\r\n    <script>\r\n      JSON.stringify({\"Hello\": 123});\r\n      // => '{\"Hello\":123}'\r\n      JSON.parse(\"[[1, 2, 3], 1, 2, 3, 4]\", function (key, value) {\r\n        if (typeof value == \"number\") {\r\n          value = value % 2 ? \"Odd\" : \"Even\";\r\n        }\r\n        return value;\r\n      });\r\n      // => [[\"Odd\", \"Even\", \"Odd\"], \"Odd\", \"Even\", \"Odd\", \"Even\"]\r\n    </script>\r\n\r\n## CommonJS Environments\r\n\r\n    var JSON3 = require(\"./path/to/json3\");\r\n    JSON3.parse(\"[1, 2, 3]\");\r\n    // => [1, 2, 3]\r\n\r\n## JavaScript Engines\r\n\r\n    load(\"path/to/json3.js\");\r\n    JSON.stringify({\"Hello\": 123, \"Good-bye\": 456}, [\"Hello\"], \"\\t\");\r\n    // => '{\\n\\t\"Hello\": 123\\n}'\r\n\r\n# Compatibility #\r\n\r\nJSON 3 has been **tested** with the following web browsers, CommonJS environments, and JavaScript engines.\r\n\r\n## Web Browsers\r\n\r\n- Windows [Internet Explorer](http://www.microsoft.com/windows/internet-explorer), version 6.0 and higher\r\n- Mozilla [Firefox](http://www.mozilla.com/firefox), version 1.0 and higher\r\n- Apple [Safari](http://www.apple.com/safari), version 2.0 and higher\r\n- [Opera](http://www.opera.com) 7.02 and higher\r\n- [Mozilla](http://sillydog.org/narchive/gecko.php) 1.0, [Netscape](http://sillydog.org/narchive/) 6.2.3, and [SeaMonkey](http://www.seamonkey-project.org/) 1.0 and higher\r\n\r\n## CommonJS Environments\r\n\r\n- [Node](http://nodejs.org/) 0.2.6 and higher\r\n- [RingoJS](http://ringojs.org/) 0.4 and higher\r\n- [Narwhal](http://narwhaljs.org/) 0.3.2 and higher\r\n\r\n## JavaScript Engines\r\n\r\n- Mozilla [Rhino](http://www.mozilla.org/rhino) 1.5R5 and higher\r\n- WebKit [JSC](https://trac.webkit.org/wiki/JSC)\r\n- Google [V8](http://code.google.com/p/v8)\r\n\r\n## Known Incompatibilities\r\n\r\n* Attempting to serialize the `arguments` object may produce inconsistent results across environments due to specification version differences. As a workaround, please convert the `arguments` object to an array first: `JSON.stringify([].slice.call(arguments, 0))`.\r\n\r\n## Required Native Methods\r\n\r\nJSON 3 assumes that the following methods exist and function as described in the ECMAScript specification:\r\n\r\n- The `Number`, `String`, `Array`, `Object`, `Date`, `SyntaxError`, and `TypeError` constructors.\r\n- `String.fromCharCode`\r\n- `Object#toString`\r\n- `Function#call`\r\n- `Math.floor`\r\n- `Number#toString`\r\n- `Date#valueOf`\r\n- `String.prototype`: `indexOf`, `charCodeAt`, `charAt`, `slice`.\r\n- `Array.prototype`: `push`, `pop`, `join`.\r\n\r\n# Contribute #\r\n\r\nCheck out a working copy of the JSON 3 source code with [Git](http://git-scm.com/):\r\n\r\n    $ git clone git://github.com/bestiejs/json3.git\r\n    $ cd json3\r\n    $ git submodule update --init\r\n\r\nIf you'd like to contribute a feature or bug fix, you can [fork](http://help.github.com/fork-a-repo/) JSON 3, commit your changes, and [send a pull request](http://help.github.com/send-pull-requests/). Please make sure to update the unit tests in the `test` directory as well.\r\n\r\nAlternatively, you can use the [GitHub issue tracker](https://github.com/bestiejs/json3/issues) to submit bug reports, feature requests, and questions, or send tweets to [@kitcambridge](http://twitter.com/kitcambridge).\r\n\r\nJSON 3 is released under the [MIT License](http://kit.mit-license.org/).",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/bestiejs/json3.git"
  },
  "scripts": {
    "test": "node test/test_*.js"
  },
  "version": "3.2.6",
  "volo": {
    "type": "directory",
    "ignore": [
      ".*",
      "build.js",
      "index.html",
      "component.json",
      "bower.json",
      "benchmark",
      "page",
      "test",
      "vendor"
    ]
  }
}
